# AUTOGENERATED! DO NOT EDIT! File to edit: roam_utils.ipynb (unless otherwise specified).

__all__ = ['remove_html_tags', 'remove_buttons', 'remove_url', 'remove_attr', 'replace_block_ref', 'remove_duplicates',
           'URL_REGEX', 'clean_sentence', 'is_too_short', 'has_stop_symbols', 'stop_symbols', 'roam_graph_to_blocks',
           'roam_blocks_to_embeddings_index']

# Cell
import re
import numpy as np
from .aws_utils import *
from .load import *
from .text import *
from .utils import pipe

from dotenv import load_dotenv
from collections.abc import Iterable

from IPython.display import JSON

# Cell
for s_func in STRING_FUNCS: #PYTHON MAGIC
    exec("%s=getattr(str, s_func)" %s_func)

# Cell
URL_REGEX = '\(?((http|https)\:\/\/)?[a-zA-Z0-9\.\/\?\:@\-_=#]+\.([a-zA-Z]){2,6}([a-zA-Z0-9\.\&\/\?\:@\-_=#])*\)?'

def remove_html_tags(form, content="HTML_TAGS"):
    html_tags = re.compile('<.*?>')
    return re.sub(html_tags, '', form)

def remove_buttons(form):
    button_elems = re.compile('\{\{\[\[(TODO|DONE|slider)\]\]\}\}')
    return re.sub(button_elems, '', form)

def remove_url(form):
    url = re.compile(URL_REGEX)
    return re.sub(url, '', form)

def remove_attr(form):
    attr = re.compile('^[^:\r\n]+:*')
    return re.sub(attr, '', form)

def replace_block_ref(form, lookup):
    """good job here... my implementation in js was much worse"""
    block_ref = re.compile('\(\((.*)\)\)')
    block = re.search(block_ref, form)
    if block:
        return lookup.get(re.sub('[()]', '', block.group(0)))
    return form

def remove_duplicates(form: Iterable):
    if isinstance(form, list):
        return list(set(form))
    return form

clean_sentence = pipe(
                      replace_block_ref,
                      remove_buttons,
                      remove_html_tags,
                      remove_url,
#                       remove_attr, #attention !!! buggy!
                      (replace, "  ", " "),
                      (replace, "[", ""),
                      (replace, "]", ""),
                      (replace, "#", ""),
                      (replace, "`", ""),
                      (replace, "__", ""),
                      (replace, "~~", ""),
                      (replace, "**", ""),
                      (replace, "^^", ""),
                      strip,
                      lower
                      )

# Cell
def is_too_short(s, length=10):
    return len(s.split(" ")) < length

stop_symbols = ["TODO", "DONE", "::", "```", "!["]
def has_stop_symbols(s):
    return any([symbol in s for symbol in stop_symbols])

# Cell
def roam_graph_to_blocks(roam_graph):
    roam_blocks_map = {}

    def extract_strings(roam_block):
        if type(roam_block) == list:
            roam_block = roam_block[0]
        if roam_block.get("string") and roam_block.get("uid"):
            roam_blocks_map[roam_block.get("uid")] = roam_block.get("string")
        if roam_block.get("children"):
            for child in roam_block.get("children"):
                extract_strings(child)

    for block in roam_graph:
        extract_strings(block)

    return roam_blocks_map

# Cell
def roam_blocks_to_embeddings_index(roam_blocks, vectors):
    roam_embeddings = []

    for i, (uid, sentence) in enumerate(roam_blocks.items()):
        if not is_too_short(sentence) and not has_stop_symbols(sentence):
#             cleaned_sentence = clean_sentence(sentence)
            roam_embeddings.append({
                "uid": uid,
                "sentence": sentence,
                "embedding": vectors[i].tolist()
            })

    return roam_embeddings