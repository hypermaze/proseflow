# AUTOGENERATED! DO NOT EDIT! File to edit: spec.ipynb (unless otherwise specified).

__all__ = ['gsheet_to_df', 'TRANSFORMER', 'SENTENCE_TRANSFORMER', 'PUBMED_IDS', 'PUBMED_CONTENT', 'EMAIL',
           'SPACY_MODEL', 'STANZA_MODEL', 'PUBMED_IDS', 'GSHEET', 'TRANSFORMER', 'HTML_TAG', 'URL', 'SPEC',
           'infer_type', 'TRANSFORMS', 'convert']

# Cell
import re
from typing import List, Tuple
import numpy as np
from varname import varname, nameof

from numpy import ndarray
from pandas import DataFrame, Series
from sentence_transformers import SentenceTransformer, models
from spacy_stanza import StanzaLanguage
from fastcore.test import test_eq

from functools import wraps
import copy

# Cell
def gsheet_to_df(worksheet) -> DataFrame:
    df = DataFrame(worksheet.get_all_values())
    df.columns = df.iloc[0]
    df = df.iloc[1:]
    return df

# Cell

#export

TRANSFORMER = {
    "name": "TRANSFORMER"
}
SENTENCE_TRANSFORMER = {
    "name":"SENTENCE_TRANSFORMER"
}
PUBMED_IDS = {
    "name": "PUBMED_IDS"
}
PUBMED_CONTENT = {
    "name": "PUBMED_CONTENT"
}
EMAIL = {
    "name": "EMAIL"
}
SPACY_MODEL = {
    "re": "(zh|da|nl|en|fr|de|el|it|ja|lt|nb|pl|pt|ro|es|xx)[_(core|ent|ner)_(web|news|wiki|sci|craft|jnlpba|bc5cdr|bionlp13cg)_(sm|md|lg)]*$"
}
STANZA_MODEL = {
    "re": "stanza",
    "doc": "Stanford's Stanza Model",
    "options": ["stanza1", "stanza2"]
}


PUBMED_IDS = {"re": ".*pubmed.ncbi.nlm.nih.gov.*"}
GSHEET = {"re": ".*docs.google.com\/spreadsheets.*"}

TRANSFORMER = {"re": "TRANSFORMER:.*"}
HTML_TAG = {
    "name": "HTML_TAG"
}
URL = {
 "re": '\(?((http|https)\:\/\/)?[a-zA-Z0-9\.\/\?\:@\-_=#]+\.([a-zA-Z]){2,6}([a-zA-Z0-9\.\&\/\?\:@\-_=#])*\)?'
}


# for t in TYPES:  # PYTHON MAGIC
#     exec("%s=str('%s')" % (t, t))

"""
? Dynamically create Types in NameSpace aka TRANSFORMER = "TRANSFORMER"
"""
SPEC = [GSHEET, TRANSFORMER, SENTENCE_TRANSFORMER, PUBMED_CONTENT, PUBMED_IDS, SPACY_MODEL, STANZA_MODEL, EMAIL, HTML_TAG]

# Cell
def infer_type(form, SPEC=SPEC):
    """ What types match this shape? """

    schemas_with_re = [schema for schema in SPEC if schema.get("re")]
    schemas_with_validate = [schema for schema in SPEC if schema.get("validate")]

    match=[]

    if (type(form) == str):
        match = [schema for schema in schemas_with_re if re.compile(schema["re"]).match(form)]

#     else:
#         match = [schema for schema in SPEC if form == schema] #direct {} compare

    if len(match) > 1:
        raise Exception(
            "Found multiple inferences for the shape you put in. Please put the input_type =EMAIL or something as a keyword argument. MAKE SURE that all schemas are UNIQUELY IDENTIFYABLE"
        )

    if len(match) == 0:
        print("No Match found in type inference, returning None")
        return None
    return match[0]



# Cell
def _transformer_to_sentence_transformer(transformer_model):
    pooling_model = models.Pooling(
        transformer_model.get_word_embedding_dimension(),
        pooling_mode_mean_tokens=True,
        pooling_mode_cls_token=True,
        pooling_mode_max_tokens=False,
    )

    return SentenceTransformer(modules=[transformer_model, pooling_model])

# Cell
#export
TRANSFORMS = {
    #!!! DO NOT USE Tuple[str] or any of these inferior BS pythonista types. They don't work and are an abomination
    ("SPACY_MODEL", "STANZA_MODEL"): StanzaLanguage,
    (str, list): lambda string: [string],
    (tuple, list): list,
    ("GSHEET", DataFrame): gsheet_to_df,
    (Series, list): Series.to_list,
    (ndarray, list): list,
    ("TRANSFORMER", "SENTENCE_TRANSFORMER"): _transformer_to_sentence_transformer,
}

# Cell
def convert(shape, source, target):
    """
    Converts an object from source type to target type
    """
    s = source if source==str or list or tuple or dict else varname(source)
    t = target if target==str or list or tuple or dict else varname(target)
    convert_func = TRANSFORMS[(s, t)]
    return convert_func(shape)
