# AUTOGENERATED! DO NOT EDIT! File to edit: utils.ipynb (unless otherwise specified).

__all__ = ['create_embedding_files_for_visualization', 'pipe', 'dedupe_conseq']

# Cell
from typing import List
from fastcore.basics import typed
from fastcore.test import *
from toolz import thread_first, thread_last
import proseflow.text as txt

# Cell
@typed
def create_embedding_files_for_visualization(metadata, vectors, metadata_headers=None):
    """ Create embedding files for visualization. Sentences can be any kind of metadata """
    metadata = [*metadata]
    assert len(metadata) == len(vectors)

    vectors_filepath = f"/results/vectors.tsv"
    metadata_filepath = f"results/metadata.tsv"

    out_vectors = open(vectors_filepath, "w", encoding="utf-8")
    out_metadata = open(metadata_filepath, "w", encoding="utf-8")

    # Meta File Header
    if metadata_headers:
        out_metadata.write("\t".join(metadata_headers) + "\n")

    for i in range(len(vectors)):
        out_metadata.write("\t".join(metadata[i]) + "\n")
        out_vectors.write("\t".join([str(x) for x in vectors[i]]) + "\n")

    out_vectors.close()
    out_metadata.close()

# Cell
def pipe(*funcs:List[callable], thread="first"):
    thread = thread_first if thread == "first" else thread_last
    return lambda data: thread(data, *funcs)

# Cell
def dedupe_conseq(coll):
    """
    Returns a generator of the elements of coll with consecutive duplicates removed.
    """
    initial = True
    prev = None
    for e in coll:
        if initial or e != prev:
            initial = False
            yield e
        prev = e